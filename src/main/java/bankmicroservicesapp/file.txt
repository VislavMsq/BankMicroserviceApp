1. currency_code - какой тип данных, ENUM или нет?
2. что должно содержаться в ENUM , тип, стутус и т.д?
3. что делать с currencyCode(валюта)
    - т.е у нас есть enum currency
    - где-то в глубине программы, призаписи или чтении из бд
      будем конвертировать currency в int и наоборот

------------------------------------------------------------------
- к одному счету может быть привязанно несколько продуктов \
- но может быть и один счет - один продукт                 /

- агримент - договор на обслуживание счете, у каждого продукта может быть
  один агримент(крудит, ипотека и т.д - это все продукты) аккаунт и агримент может быть
  onetomany

- продукт - эти то, что выдает банк, нейм сделать енам можно(автокредит, ипотека)
- в продукте останется: нейм, статус, и дата тайм, лист каренси кодов
- в агримент перезжает интерест рейт и лимит
- все кредиты за одним менеджером, всеми ипотеками занимается другой менеджер

- если связь вантуван, то и обратно вантуван,если менитуван, то обратно вантумени

сделать продукт енам, а все условия прописовать в агрименте - можно так
- можно сделать поле дискаунт и продукте - это будут индивидуальные условия для кажого клиента

дату храним как локал дату

joinColum -> ставится на перенсе credit_id ссылается на поле id

в клиенте можно так @OneToMany(mappedBy = "client")
    private List<Account> accounts;

это у родителя @ManyToOne()
    @JoinColumn(name = "client_id", referencedColumnName = "id")
    private Client client;
это у дочери @OneToMany(mappedBy = "client")
    private List<Account> accounts;

у дочерних есть ссылка на родителей, у дочерних пишем джоин колумн, у родителей пишем мапед и каскад.
Если ты удалишь клиента - удалятся и все его акаунты. Клиент родитель, акаунт дочь
выходит что аккаунт дочь

~ToOne - по умолчанию стоит EAGER, надо менять на Lazy. ~ToMany по умолчанию LAZY, можно не указывать,
но для наглядности прописывается

продукт - справочник
----------------------------------------------------------
в аккаунте должен быть клиент
в транзакшн должно быть два аккаунта
---------------------------------------------
форе инд кей над полем кердит айди и кредит айди -> cсылаемся на идентификатор аккаунта
--------------------------------------------------------
есть таблица адрес и юзер: в таблице адрес есть сущность юзер ,из таблицы адрес мы ссылаемся на юзера и пишем
@onetoone@joinColum(name = "user_id"), а в обратную сторону чтобы получить адрес мы ставим:
@onetoone@(mappedBy = "user", cascade = cascadetype.All)




-------------------------------------------------------------------

точка входа в приложение, куда приходят http запросы, любая штука которая умеет отпровляет http может быть нашим
условыным фронтом, обрабатываешь запрос и даешь ответ

урезанное энтити - это дто
из всех полей из дто нужно создать обьект нужный
условные поля из дто - это то, что может прийти в фронта

в service строится основная логика

создам остальные контролл и унаследую их от jpa

если есть вязи, нужно повесить @JsonIgnore - над всеми связями повесить

как выводить в json формате!
